using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.MSBuild;
using System.Collections.Immutable;

namespace Tdg5.StandardConventions.Tests.TestHelpers;

/// <summary>
/// Helper class for analyzing test projects.
/// </summary>
public class TestProjectAnalyzer
{
    private readonly MSBuildWorkspace workspace;

    /// <summary>
    /// Initializes a new instance of the <see cref="TestProjectAnalyzer"/> class.
    /// </summary>
    /// <param name="globalProperties">The global properties to use when building
    /// projects.</param>
    public TestProjectAnalyzer(Dictionary<string, string> globalProperties)
    {
        workspace = MSBuildWorkspace.Create(globalProperties);
    }

    /// <summary>
    /// Analyzes the specified project.
    /// </summary>
    /// <param name="projectPath">The path to the project file.</param>
    /// <returns>The list of <see cref="Diagnostic"/> instances generated by
    /// compiling the project with analyzers.</returns>
    public IEnumerable<Diagnostic> AnalyzeProject(string projectPath)
    {
        var project = workspace.OpenProjectAsync(projectPath).Result;
        var analyzers = project
            .AnalyzerReferences
            .SelectMany(r => r.GetAnalyzers(project.Language))
            .ToImmutableArray();
        foreach (var analyzerReference in project.AnalyzerReferences)
        {
            Console.WriteLine(analyzerReference.Id);
        }
        foreach (var analyzer in analyzers)
        {
            foreach (var thing in analyzer.SupportedDiagnostics)
            {
                Console.WriteLine(thing.Id);
            }
        }
        var compilation = project.GetCompilationAsync().Result
            ?? throw new InvalidOperationException("Failed to compile project.");

        var compilationWithAnalyzers = compilation.WithAnalyzers(analyzers);

        var diagnostics = compilationWithAnalyzers.GetAnalyzerDiagnosticsAsync().Result;

        return diagnostics;
    }
}
